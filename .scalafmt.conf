version = 3.8.3
runner.dialect = Scala3

align {
  preset = more
  arrowEnumeratorGenerator = true
  tokenCategory {
    "Equals" = "Assign"
    "LeftArrow" = "Assign"
    ":=" = "ApplyInfix"
  }
  tokens."+" = [
  { code = ":=",  owner = "Term.ApplyInfix" },
  { code = "+=",  owner = "Term.ApplyInfix" },
  { code = "++=", owner = "Term.ApplyInfix" },
  { code = "--=", owner = "Term.ApplyInfix" },
  { code = "-=",  owner = "Term.ApplyInfix" }
]
}
maxColumn = 120
docstrings.style = SpaceAsterisk
assumeStandardLibraryStripMargin = true
rewriteTokens {
  "⇒": "=>"
  "←": "<-"
  "→": "->"
}
rewrite.scala3 = {
  convertToNewSyntax = true
}
rewrite.rules = [
  # a func (b, c)  ---> a.func(b, c)
  AvoidInfix,
  # def foo = { List(1,2,3).sum } ---> def foo = List(1,2,3).sum
  RedundantBraces,
  # (a + b) + c   --->   a + b + c
  RedundantParens,
  # final lazy private implicit val x = 42  ---> implicit final private lazy val x = 42
  SortModifiers,
  # for (...) yield x ---> for {...} yield x
  PreferCurlyFors
]

rewrite.neverInfix.excludeFilters = [
  until
  to
  by
  eq
  ne
  "should.*"
  "contain.*"
  "must.*"
  "behave.*"
  "like.*"
  in
  inIO
  be
  taggedAs
  thrownBy
  synchronized
  have
  when
  size
  theSameElementsAs
]

includeNoParensInSelectChains = false
binPack.literalArgumentLists = false